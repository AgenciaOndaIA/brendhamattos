{
  "createdAt": "2025-06-11T13:53:08.667Z",
  "updatedAt": "2025-06-22T13:00:33.057Z",
  "id": "yjWf4aWsY7Po2ckx",
  "name": "02 - [Maria] v2",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "# Checklist de Testes para o Fluxo da Anna\nEste checklist contém 30 pontos essenciais para garantir que todas as funcionalidades do fluxo de trabalho sejam testadas corretamente antes de qualquer update. Ele foi elaborado com base na análise do fluxo fornecido, cobrindo integrações, lógica condicional, manipulação de dados e tratamento de erros.\n\n#### Integrações Externas\n- [x] Testar se o trigger RabbitMQ (\"Consumer\") recebe mensagens corretamente do Chatwoot.\n- [x] Verificar se o nó \"Add to List\" adiciona dados ao Redis usando a chave correta (`contact_id`).\n- [x] Confirmar que o nó \"Get List\" recupera os dados esperados do Redis.\n- [x] Testar a consulta ao Postgres em \"Get Vars\" para garantir que retorna as variáveis esperadas (e.g., `ai_agents`, `users`).\n- [x] Verificar se o nó \"Update History\" insere ou atualiza registros corretamente na tabela `core_chat_histories`.\n- [x] Testar o download de mídia no nó \"Download Media\" com diferentes tipos de arquivos (e.g., .oga, .pdf, imagens).\n- [x] Confirmar que a conversão de PDF em \"Convert PDF\" gera imagens JPG corretamente.\n- [x] Testar a transcrição de áudio em \"Transcription\" com arquivos .oga usando o modelo Whisper da OpenAI.\n- [x] Verificar se o envio de mensagens de texto via \"Envia Chatwoot Text\" funciona corretamente.\n- [x] Testar o envio de mídia (e.g., áudio MP3) via \"Send Chatwoot Media\".\n-\n#### Lógica Condicional\n- [x] Testar o \"Switch 0\" com diferentes canais (e.g., WhatsApp, Telegram), tipos de remetente e status de conversa.\n- [x] Verificar o \"Switch 1\" com diferentes `message_id` e valores de cooldown para garantir o roteamento correto.\n- [x] Testar o \"Switch 2\" com mensagens contendo URLs de mídia (e.g., .oga, .pdf) e mensagens de texto puro.\n- [x] Confirmar a lógica do \"Switch 3\" comparando timestamps de listas para decidir sobre o reset.\n-\n#### Manipulação de Dados e Loops\n- [x] Testar o \"Loop\" para processar múltiplos itens em lotes corretamente.\n- [x] Verificar se o \"Split Itens\" divide os dados conforme esperado.\n- [x] Testar o \"Split Messages\" para segmentar mensagens em partes coerentes.\n- [x] Confirmar que o \"Keep Loop\" mantém o loop ativo quando `loop_reset` é falso.\n-\n#### Componentes de IA e Processamento de Texto\n- [x] Testar o \"Message Segment Agent\" para dividir respostas em até 5 mensagens, preservando listas e quebras de linha.\n- [x] Verificar se o \"OutputParser\" analisa a saída do agente corretamente no formato JSON esperado.\n\n#### Temporização e Atrasos\n- [x] Testar o \"Cooldown\" com diferentes valores de cooldown para garantir que o atraso é aplicado corretamente.\n- [x] Verificar os atrasos em \"Delay Before Message\" (0s) e \"Delay After Message\" (1s).\n-\n#### Tratamento de Erros\n- [ ] Simular falhas no Redis (e.g., serviço indisponível) e verificar o comportamento do fluxo.\n- [ ] Testar falhas no Postgres (e.g., consulta inválida) e confirmar o tratamento de erros.\n- [x] Simular erros em requisições HTTP (e.g., 404, 500) e verificar as respostas do fluxo.\n-\n#### Nós Específicos\n- [ ] Testar o \"Downtime\" com diferentes valores (e.g., \"00:00:00\", \"01:00:00\") para validar a lógica de inatividade.\n- [ ] Verificar o \"Picture\" para baixar e fazer upload de imagens de perfil quando necessário.\n- [ ] Testar o \"Set user picture\" para atualizar a imagem do usuário no Directus.\n- [x] Confirmar que o \"Merge1\" combina os dados de entrada corretamente.\n- [x] Testar o fluxo completo com dados reais para validar a integração de todos os componentes.\n-\n\nEste checklist garante uma validação completa do fluxo, cobrindo todas as áreas críticas. Priorize os testes de acordo com as alterações recentes e registre quaisquer problemas encontrados.",
        "height": 1180,
        "width": 1440,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2920,
        360
      ],
      "typeVersion": 1,
      "id": "d8e4601e-38a8-44ac-a78c-3cbe23c9ac1a",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "queue": "anna.message.send",
        "options": {
          "acknowledge": "executionFinishesSuccessfully",
          "jsonParseBody": true,
          "onlyContent": true
        }
      },
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        -1260,
        720
      ],
      "id": "081d17d0-d0cc-4e1a-892b-f60051893bf6",
      "name": "Consumer",
      "credentials": {
        "rabbitmq": {
          "id": "aTP4hRFNjGCY9aQX",
          "name": "brendha"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "zaptor_bobgrow",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1280,
        500
      ],
      "id": "8a871e49-2a48-417d-91cb-01b1d1135dc9",
      "name": "Webhook",
      "webhookId": "ffa175d1-1eb7-42cc-a5f0-80e290bcf91b",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://services.leadconnectorhq.com/conversations/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "highLevelOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ $('Response Format').item.json.segment }}"
            },
            {
              "name": "type",
              "value": "={{ $('Consumer1').last().json.body.messageType }}"
            },
            {
              "name": "locationId",
              "value": "={{ $('Consumer1').last().json.body.locationId }}"
            },
            {
              "name": "contactId",
              "value": "={{ $('Consumer1').last().json.body.contactId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2280,
        1340
      ],
      "id": "9005892c-a14b-4973-843f-b54bd6089b1d",
      "name": "resposta BobGrow",
      "credentials": {
        "highLevelOAuth2Api": {
          "id": "k3RZ1pJzMNgKyUis",
          "name": "BrendhaMattos"
        }
      }
    },
    {
      "parameters": {
        "url": "https://services.leadconnectorhq.com/contacts/ocQHyuzHvysMo5N5VsXc",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "highLevelOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1020,
        2460
      ],
      "id": "6e532037-d857-4099-96bf-b9d2f9ad28b4",
      "name": "HTTP Request2",
      "disabled": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"bobgrow\": {\n    \"account_id\": \"{{ $('Normalizar').last().json.body.locationId }}\",\n    \"contact_id\": \"{{ $('Normalizar').last().json.body.contactId }}\",\n    \"conversation_id\": \"{{ $('Normalizar').last().json.body.conversationId }}\",\n    \"sender_type\": \"{{ $('Normalizar').last().json.body.type }}\",\n    \"bot_token\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.bot_token) }},\n    \"conversation_status\": {{ JSON.stringify($json.current_status) }},\n    \"assignee\": {{ JSON.stringify($('Consumer1').first().json.body.conversation?.meta?.assignee?.name || null) }},\n    \"content\": {{ ($('Consumer1').first().json.body?.body || \"\").replace(/\\s*Instance Source:.*$/i, \"\").toJsonString() }},\n    \"data_url\": \"{{ $('Normalizar').last().json.webhookUrl }}\",\n    \"message_id\": {{ JSON.stringify($('Consumer1').last().json.conversations[0].lastMessageConversationProviderId) }},\n    \"channel\": {{ JSON.stringify(\n      $('Consumer1').last().json.conversations[0].lastMessageType === 'incoming'\n        ? 'Mensagem Recebida'\n        : $('Consumer1').last().json.conversations[0].lastMessageType === 'outgoing'\n        ? 'Mensagem Enviada'\n        : $('Consumer1').last().json.conversations[0].lastMessageType === 'template'\n        ? 'Mensagem Automática'\n        : 'SMS'\n    ) }},\n    \"user_name\": {{ JSON.stringify($('buscaContato').last().json.conversations[0].fullName || \"\") }},\n    \"phone_number\": {{ JSON.stringify($('Normalizar').first().json.conversations[0].phone || \"\") }},\n    \"events\": {{ JSON.stringify($('buscaContato').last().json.conversations[0].lastMessageBody?.split('\\n')[1] || \"\") }}\n  },\n  \"system\": {\n    \"cooldown\": {{ $('Get Vars').first().json.ai_agents.cooldown }},\n    \"workflow_path\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.workflow_path) }},\n    \"model\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.model) }},\n    \"openai_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.openai_key) }},\n    \"directus_token\": {{ JSON.stringify($('Get Vars').first().json.global_vars.directus_token) }},\n    \"stirling_pdf_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.stirling_pdf_key) }},\n    \"elevenlabs_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.elevenlabs_key) }},\n    \"conversations_id\": {{ JSON.stringify($('Get Vars').first().json.conversations.id) }},\n    \"context_window\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.context_window) }},\n    \"enabled_condition\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.enabled_condition) }},\n    \"allow_whatsapp_groups\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.allow_whatsapp_groups) }},\n    \"allow_human_interruption\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.allow_human_interruption) }},\n    \"agent_phone_number\": {{ JSON.stringify(($('Get Vars').first().json.ai_agents.phone_number || '').replace(/\\D/g, '')) }},\n    \"agent_mentioned\": {{ JSON.stringify(($('Consumer1').first().json.body?.content || '').includes('@' + ($('Get Vars').first().json.ai_agents.phone_number || '').replace(/\\D/g, ''))) }},\n    \"agent_name\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.name) }},\n    \"system_message\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.system_message) }},\n    \"user_type\": {{ JSON.stringify($('Get Vars').first().json.users.type) }},\n    \"output_format\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.output_format) }},\n    \"elevenlabs_model\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.elevenlabs_model) }},\n    \"elevenlabs_voice\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.elevenlabs_voice) }},\n    \"chatwoot_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.chatwoot_service) }},\n    \"n8n_webhook_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.n8n_webhook_service) }},\n    \"stirling_pdf_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.stirling_pdf_service) }},\n    \"directus_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.directus_service) }},\n    \"enabled_rag\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.enabled_rag) }},\n    \"ai_agent_id\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.id) }},\n    \"pinecone_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.pinecone_key) }},\n    \"downtime\": {{ new Date(\"1970-01-01T\" + $('Get Vars').first().json.ai_agents.downtime + \"Z\").getTime() / 1000 }}\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -800,
        2460
      ],
      "id": "9bc34bb7-60c3-48b0-a79a-85746741dcca",
      "name": "Mapping2",
      "disabled": true
    },
    {
      "parameters": {
        "height": 240,
        "width": 2780,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1340,
        2220
      ],
      "typeVersion": 1,
      "id": "89e2f124-63f4-4c39-9f4a-a1e336d72d0b",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "main",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "binaries"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1300,
        1900
      ],
      "id": "2ebfd45e-14b9-4b88-b98d-783d1ac989c1",
      "name": "Main Agent",
      "webhookId": "d503e6f9-0989-42d5-a598-e268b20c3182"
    },
    {
      "parameters": {
        "operation": "get",
        "contactId": "={{ $json.body.contactId }}",
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.highLevel",
      "typeVersion": 2,
      "position": [
        -1220,
        2460
      ],
      "id": "68c393ef-5da8-4592-8ca5-08da4d708816",
      "name": "HighLevel1",
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 2,
        "output": "={{\n  (\n    $('Mapping').first().json.chatwoot.channel !== 'WhatsApp Web Group' ||\n    (\n      $('Mapping').first().json.system.allow_whatsapp_groups === 'always_enabled' ||\n      (\n        $('Mapping').first().json.system.allow_whatsapp_groups === 'enabled_when_mentioned' &&\n        $('Mapping').first().json.system.agent_mentioned\n      )\n    )\n  )\n  &&\n  {\n    'pending_status': \n      $('Mapping').first().json.chatwoot.sender_type === 'Contact' &&\n      $('Mapping').first().json.chatwoot.conversation_status === 'pending',\n\n    'all_status': \n      $('Mapping').first().json.chatwoot.sender_type === 'Contact',\n\n    'not_assigned': \n      $('Mapping').first().json.chatwoot.sender_type === 'Contact' &&\n      !$('Mapping').first().json.chatwoot.assignee\n  }[$('Mapping').first().json.system.enabled_condition]\n    ? 1\n    : 0\n}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -860,
        2400
      ],
      "id": "824b06bc-f942-4abb-b167-e9861b9df36d",
      "name": "Switch ",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DO $agent$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 \n    FROM ai_agents\n    WHERE account_id = $1\n      AND $2 = ANY(string_to_array(inboxes_ids, ',')::int[])\n  ) THEN\n    RAISE EXCEPTION 'Nenhum AI Agent encontrado para a conta % e inbox %', $1, $2;\n  END IF;\nEND $agent$; WITH\n-- 1) Seleciona o AI Agent associado à conta e à caixa de entrada\nselected_ai AS (\n    SELECT ai.*\n    FROM ai_agents ai\n    WHERE ai.account_id = $1\n      AND $2 = ANY(string_to_array(ai.inboxes_ids, ',')::int[])\n    LIMIT 1\n),\n-- 2) Seleciona as variáveis globais (assume-se que seja um singleton)\nselected_gv AS (\n    SELECT *\n    FROM global_vars\n    LIMIT 1\n),\n-- 3) Faz o upsert do usuário: insere se não existir, caso contrário, ignora\nupsert_user AS (\n    INSERT INTO users (id, date_created, picture_url, username, phone, ai_agent)\n    SELECT $3, NOW(), $4, $5, $6, ai.id\n    FROM selected_ai ai\n    WHERE ai.id IS NOT NULL\n    ON CONFLICT (id) DO NOTHING\n    RETURNING *\n),\n-- 4) Seleciona o usuário (recém-inserido ou existente)\nfinal_user AS (\n    SELECT * FROM upsert_user\n    UNION\n    SELECT * FROM users\n    WHERE id = $3\n),\n-- 5) Cria uma nova conversa apenas se não existir nenhuma para esse usuário\nmaybe_new_conversation AS (\n    INSERT INTO conversations (id, user_id, date_created)\n    SELECT gen_random_uuid(), final_user.id, NOW()\n    FROM final_user\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM conversations\n        WHERE user_id = final_user.id\n    )\n    RETURNING *\n),\n-- 6) Seleciona a última conversa do usuário (nova ou existente)\nlast_conversation AS (\n    SELECT * FROM maybe_new_conversation\n    UNION\n    SELECT * FROM conversations\n    WHERE user_id = (SELECT id FROM final_user)\n    ORDER BY date_created DESC\n    LIMIT 1\n),\n-- 7) Seleciona os históricos de chat (simplificado)\nchat_histories AS (\n    SELECT ch.*\n    FROM core_chat_histories ch\n    JOIN last_conversation lc ON ch.session_id = lc.id\n    ORDER BY ch.date_created DESC\n    LIMIT (SELECT context_window FROM selected_ai)\n),\n-- 8) Seleciona os calendários (scheduling) associados ao usuário\nuser_calendars AS (\n    SELECT sch.*\n    FROM event_history_user sch\n    WHERE sch.user_id = (SELECT id FROM final_user)\n),\n-- 9) Seleciona os eventos do usuário a partir da data atual\nuser_events AS (\n    SELECT eh.*\n    FROM event_history eh\n    JOIN user_calendars uc ON eh.session_id = uc.id\n    WHERE eh.date >= CURRENT_DATE\n    ORDER BY eh.date ASC\n)\n-- 10) Retorna os resultados no formato JSON\nSELECT\n    (SELECT row_to_json(ai) FROM selected_ai ai) AS ai_agents,\n    (SELECT row_to_json(gv) FROM selected_gv gv) AS global_vars,\n    (SELECT row_to_json(final_user) FROM final_user) AS users,\n    (SELECT row_to_json(last_conversation) FROM last_conversation) AS conversations,\n    (SELECT json_agg(row_to_json(ch)) FROM chat_histories ch) AS core_chat_histories,\n    (SELECT COALESCE(json_agg(evt), '[]'::json) FROM user_events evt) AS events;",
        "options": {
          "queryReplacement": "=1, 3, 6, https://chatwoot.brendhamattos.ondaia.online/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBaGtEIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--f6718a3db7de2c828c43336a6b5d731acaf0f9a9/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--31a1f63818a5159f71dca8446fe68168fe417ce5/375829276_846428953853380_8933243245683239656_n.jpg , Brendha Mattos (Brendha Mattos), +351939561440\n\n\n"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -420,
        700
      ],
      "id": "e4205a46-be8b-442c-b7fb-24ffd06e7798",
      "name": "Get Vars",
      "credentials": {
        "postgres": {
          "id": "ppYhvJxK7mITa7Mb",
          "name": "Postgres BrendhaMattos"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DO $agent$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 \n    FROM ai_agents\n    WHERE account_id = $1\n      AND $2 = ANY(string_to_array(inboxes_ids, ',')::int[])\n  ) THEN\n    RAISE EXCEPTION 'Nenhum AI Agent encontrado para a conta % e inbox %', $1, $2;\n  END IF;\nEND $agent$; WITH\n-- 1) Seleciona o AI Agent associado à conta e à caixa de entrada\nselected_ai AS (\n    SELECT ai.*\n    FROM ai_agents ai\n    WHERE ai.account_id = $1\n      AND $2 = ANY(string_to_array(ai.inboxes_ids, ',')::int[])\n    LIMIT 1\n),\n-- 2) Seleciona as variáveis globais (assume-se que seja um singleton)\nselected_gv AS (\n    SELECT *\n    FROM global_vars\n    LIMIT 1\n),\n-- 3) Faz o upsert do usuário: insere se não existir, caso contrário, ignora\nupsert_user AS (\n    INSERT INTO users (id, date_created, picture_url, username, phone, ai_agent)\n    SELECT $3, NOW(), $4, $5, $6, ai.id\n    FROM selected_ai ai\n    WHERE ai.id IS NOT NULL\n    ON CONFLICT (id) DO NOTHING\n    RETURNING *\n),\n-- 4) Seleciona o usuário (recém-inserido ou existente)\nfinal_user AS (\n    SELECT * FROM upsert_user\n    UNION\n    SELECT * FROM users\n    WHERE id = $3\n),\n-- 5) Cria uma nova conversa apenas se não existir nenhuma para esse usuário\nmaybe_new_conversation AS (\n    INSERT INTO conversations (id, user_id, date_created)\n    SELECT gen_random_uuid(), final_user.id, NOW()\n    FROM final_user\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM conversations\n        WHERE user_id = final_user.id\n    )\n    RETURNING *\n),\n-- 6) Seleciona a última conversa do usuário (nova ou existente)\nlast_conversation AS (\n    SELECT * FROM maybe_new_conversation\n    UNION\n    SELECT * FROM conversations\n    WHERE user_id = (SELECT id FROM final_user)\n    ORDER BY date_created DESC\n    LIMIT 1\n),\n-- 7) Seleciona os históricos de chat (simplificado)\nchat_histories AS (\n    SELECT ch.*\n    FROM core_chat_histories ch\n    JOIN last_conversation lc ON ch.session_id = lc.id\n    ORDER BY ch.date_created DESC\n    LIMIT (SELECT context_window FROM selected_ai)\n),\n-- 8) Seleciona os calendários (scheduling) associados ao usuário\nuser_calendars AS (\n    SELECT sch.*\n    FROM event_history_user sch\n    WHERE sch.user_id = (SELECT id FROM final_user)\n),\n-- 9) Seleciona os eventos do usuário a partir da data atual\nuser_events AS (\n    SELECT eh.*\n    FROM event_history eh\n    JOIN user_calendars uc ON eh.session_id = uc.id\n    WHERE eh.date >= CURRENT_DATE\n    ORDER BY eh.date ASC\n)\n-- 10) Retorna os resultados no formato JSON\nSELECT\n    (SELECT row_to_json(ai) FROM selected_ai ai) AS ai_agents,\n    (SELECT row_to_json(gv) FROM selected_gv gv) AS global_vars,\n    (SELECT row_to_json(final_user) FROM final_user) AS users,\n    (SELECT row_to_json(last_conversation) FROM last_conversation) AS conversations,\n    (SELECT json_agg(row_to_json(ch)) FROM chat_histories ch) AS core_chat_histories,\n    (SELECT COALESCE(json_agg(evt), '[]'::json) FROM user_events evt) AS events;",
        "options": {
          "queryReplacement": "={{ $json.body.account.id ?? null }}, {{ $json.body.inbox.id ?? null }}, {{ $json.body.sender.id ?? null }}, {{ $ifEmpty($json.body.sender.avatar, null) }} , {{ $json.body.sender.name ?? null }}, {{ $json.body.sender.phone_number ?? null }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1540,
        2400
      ],
      "id": "407d9993-e91b-4a93-9c41-91facc617498",
      "name": "Get Vars2",
      "credentials": {
        "postgres": {
          "id": "ppYhvJxK7mITa7Mb",
          "name": "Postgres BrendhaMattos"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"chatwoot\": {\n    \"account_id\": {{ $('Consumer1').first().json.body.account.id }},\n    \"contact_id\": {{ $('Consumer1').first().json.body.conversation.contact_inbox.contact_id }},\n    \"conversation_id\": {{ $('Consumer1').first().json.body.conversation.messages[0].conversation_id }},\n    \"sender_type\": {{ JSON.stringify($('Consumer1').first().json.body.conversation.messages[0].sender_type) }},\n    \"bot_token\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.bot_token) }},\n    \"conversation_status\": {{ JSON.stringify($json.current_status) }},\n    \"assignee\": {{ JSON.stringify($('Consumer1').first().json.body.conversation?.meta?.assignee?.name || null ) }},   \n    \"content\": {{ ($('Consumer1').first().json.body?.content || \"\").toJsonString() }},    \n    \"data_url\": {{ JSON.stringify(\n        $('Consumer1').first().json.body.conversation.messages?.[0]?.attachments?.[0]?.data_url || null\n      )\n    }},  \n    \"message_id\": {{ $('Consumer1').first().json.body.id }},  \n    \"channel\": {{\n      JSON.stringify(\n        $('Consumer1').first().json.body.conversation.channel === 'Channel::Api' \n        ? (\n            /@s\\.whatsapp\\.net$/.test($('Consumer1').first().json.body.sender.identifier) \n            ? 'WhatsApp Web' \n            : /@g\\.us$/.test($('Consumer1').first().json.body.sender.identifier) \n            ? 'WhatsApp Web Group' \n            : $('Consumer1').first().json.body.conversation.channel.replace('Channel::', '')\n          ) \n        : $('Consumer1').first().json.body.conversation.channel.replace('Channel::', '')\n      )\n    }},  \n    \"user_name\": {{ JSON.stringify(\n      $('Consumer1').first().json.body.sender.identifier?.match(/@g\\.us$/)\n        ? (\n            $('Consumer1').first().json.body?.content?.match(/^\\*\\*(.*?)\\*\\*/)?.[1] || ''\n          )\n        : $('Consumer1').first().json.body.sender?.name || ''\n    ) }},\n    \"phone_number\": {{ JSON.stringify($('Consumer1').first().json.body.sender.phone_number) || null }},\n    \"events\": {{ JSON.stringify($('Get Vars').first().json.events) }}\n  },\n  \n  \"system\": {\n    \"cooldown\": {{ $('Get Vars').first().json.ai_agents.cooldown }},\n    \"workflow_path\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.workflow_path) }},\n    \"model\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.model) }},\n    \"openai_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.openai_key) }},\n    \"directus_token\": {{ JSON.stringify($('Get Vars').first().json.global_vars.directus_token) }},\n    \"stirling_pdf_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.stirling_pdf_key) }},\n    \"elevenlabs_key\": \"{{ $('Get Vars').first().json.global_vars.elevenlabs_key }}\",\n    \"conversations_id\": {{ JSON.stringify($('Get Vars').first().json.conversations.id) }},\n    \"context_window\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.context_window) }},\n    \"enabled_condition\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.enabled_condition) }},\n    \"allow_whatsapp_groups\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.allow_whatsapp_groups) }},\n    \"allow_human_interruption\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.allow_human_interruption) }},\n    \"agent_phone_number\": {{ JSON.stringify(($('Get Vars').first().json.ai_agents.phone_number || '').replace(/\\D/g, '')) }},\n    \"agent_mentioned\": {{ JSON.stringify(($('Consumer1').first().json.body?.content || '' ).includes('@' + ($('Get Vars').first().json.ai_agents.phone_number || '').replace(/\\D/g, ''))) }},\n    \"agent_name\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.name) }},\n    \"system_message\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.system_message) }},\n    \"user_type\": {{ JSON.stringify($('Get Vars').first().json.users.type) }},\n    \"output_format\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.output_format) }},\n    \"elevenlabs_model\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.elevenlabs_model) }},\n    \"elevenlabs_voice\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.elevenlabs_voice) }},\n    \"chatwoot_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.chatwoot_service) }},\n    \"n8n_webhook_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.n8n_webhook_service) }},\n    \"stirling_pdf_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.stirling_pdf_service) }},\n    \"directus_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.directus_service) }},\n    \"enabled_rag\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.enabled_rag) }},\n    \"ai_agent_id\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.id) }},\n    \"pinecone_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.pinecone_key) }},\n    \"downtime\": {{ new Date(\"1970-01-01T\" + $('Get Vars').first().json.ai_agents.downtime + \"Z\").getTime() / 1000 }}\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1060,
        2400
      ],
      "id": "fa30efb9-9ab8-403d-9b72-c28bbae1a1bd",
      "name": "Mapping1",
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Chama o agente de conhecimento e retira do vector store informações relevantes.",
        "method": "POST",
        "url": "={{ $env.WEBHOOK_URL }}/webhook/agent/knowledge",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"content\": \"{{ $('Main Agent').last().json.body.content }}\",\n  \"mapping\": {{ $('Main Agent').last().json.body.mapping }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -160,
        2380
      ],
      "id": "a35fccc0-795f-4af6-87b8-3d826ec443f1",
      "name": "Agent Knowledge1",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://services.leadconnectorhq.com/conversations/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "highLevelOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Version",
              "value": "2021-07-28"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbl9pZCI6InhRUEpGeTZ1aHpBU3NKVlVZbUhwIiwidmVyc2lvbiI6MSwiaWF0IjoxNzMzNDA2NjEyNjgyLCJzdWIiOiJXcVVES29hTm5wQXBneDV2UDBVbCJ9.xDGCib3ml8gzj0O-gabE2zka9UcNMgn2IlVnSkjkr70"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contactId\": \"{{ $('HighLevel1').item.json.id }}\",\n  \"locationId\": \"{{ $('HighLevel1').item.json.locationId }}\",\n  \"type\": \"SMS\",\n  \"attachments\": [\n    {\n      \"url\": \"{{ $json.files[0].url }}\"\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -520,
        2240
      ],
      "id": "5acb7f90-65fd-42fc-83ec-e387421f05ae",
      "name": "HTTP Request5",
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://services.leadconnectorhq.com/medias/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "highLevelOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "=1"
            },
            {
              "name": "fileId",
              "value": "={{ $json.fileId }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer SEU_TOKEN"
            },
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -720,
        2240
      ],
      "id": "6fff575b-ded0-41dd-96c3-2eb00576d060",
      "name": "buscaDoc",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://services.leadconnectorhq.com/medias/upload-file",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "highLevelOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "hosted",
              "value": "false"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -900,
        2240
      ],
      "id": "4751e963-245e-4a47-954b-a5dd1debc5b5",
      "name": "sobe audio",
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Chama agente de calendário como ferramenta para gerenciar agendamentos e compromissos do calendário através do n8n. Processa solicitações relacionadas a criação, atualização, consulta e cancelamento de eventos agendados. Sem parâmetros necessários.",
        "method": "POST",
        "url": "={{ $env.WEBHOOK_URL }}webhook/calendar/agent",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"api-address\": \"{{ $('Main Agent').first().json.body.mapping.parseJson().system.directus_service }}\",\n  \"api-token\": \"{{ $('Main Agent').first().json.body.mapping.parseJson().system.directus_token }}\",\n  \"last-workflow\": \"{{ $workflow.name }}\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"solicitacao\": \"{{ $fromAI(\n    \"solicitacao\",\n    \"Descreva a solicitação do usuario relativa a operacao do calendario com maximo de detalhes para o agente de calendário\",\n    \"string\"\n  )}}\",\n  \"contact\": \"{{ $('Main Agent').first().json.body.mapping.parseJson().chatwoot.contact_id }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1260,
        2280
      ],
      "id": "f599f5e7-d009-4767-a9e9-59cd7ec2a6df",
      "name": "Agent Calendar"
    },
    {
      "parameters": {
        "sseEndpoint": "https://webhook.agencia.ondaia.online/mcp/69f7582d-9695-440e-8f50-ef9050adf9f4/sse"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -160,
        2240
      ],
      "id": "2d89acf3-121e-4095-b4cc-033b483bf500",
      "name": "MCP Client"
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {
          "baseURL": "https://api.openai.com/v1"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        880,
        1540
      ],
      "id": "9c1843fe-2e40-4bae-964d-453706a91aa2",
      "name": "Openai1",
      "credentials": {
        "openAiApi": {
          "id": "AhNlapeTC4e4mLvK",
          "name": "brendha_mattos"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {
          "baseURL": "https://api.openai.com/v1"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        540,
        2280
      ],
      "id": "b731a55e-20b0-4706-b457-bc0320b5d694",
      "name": "Openai2",
      "credentials": {
        "openAiApi": {
          "id": "AhNlapeTC4e4mLvK",
          "name": "brendha_mattos"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Main Agent').first().json.body.mapping.parseJson().system.n8n_webhook_service}}/agent/knowledge",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $('Main Agent').first().json.body.mapping.parseJson().chatwoot.content ?? $input.all()\n        .map(item => item.json.content)\n        .filter(content => content)\n        .join('\\n\\n') }}"
            },
            {
              "name": "mapping",
              "value": "={{ $('Main Agent').first().json.body.mapping }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -640,
        2440
      ],
      "id": "9ee15221-f8c6-4543-9eae-4844c4a8c219",
      "name": "Call Agent Rag1",
      "executeOnce": true,
      "notesInFlow": true,
      "disabled": true,
      "notes": "Chama o agente principal"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$('Mapping').first().json.system.n8n_webhook_service}}/{{ $('Mapping').first().json.system.workflow_path }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $json.content ?  $json.content :\n    $input.all()\n      .map(item => item.json?.content)\n      .filter(content => content)\n      .join('\\n\\n') || \"Sem contexto em texto.\"\n}}"
            },
            {
              "name": "mapping",
              "value": "={{JSON.stringify($('Mapping').first().json) }}"
            },
            {
              "name": "files",
              "value": "={{ $input.all().flatMap(loops => loops.json.binaries) }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -440,
        2440
      ],
      "id": "0ce54797-ffdf-4d7d-9cda-b3ac465487f4",
      "name": "Call Agent Main1",
      "executeOnce": true,
      "notesInFlow": true,
      "disabled": true,
      "notes": "Chama o agente principal"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "binaryPropertyName": "=data",
        "destinationKey": "binaries",
        "options": {
          "keepSource": "both"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        120,
        1380
      ],
      "id": "10cf699c-8a56-4b47-8a0a-b7bceb6dcbad",
      "name": "File To Text",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "exchange",
        "exchange": "anna.message.in",
        "exchangeType": "direct",
        "routingKey": "debouncer.delay",
        "sendInputData": false,
        "message": "={{ $('Consumer1').first().json.toJsonString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1.1,
      "position": [
        2480,
        600
      ],
      "id": "f41b841c-d604-4dab-88b8-45b5168f27b6",
      "name": "Debouncer Delay",
      "credentials": {
        "rabbitmq": {
          "id": "aTP4hRFNjGCY9aQX",
          "name": "brendha"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=qkGSXzZn2ehywthGyq8C"
      },
      "id": "25a0139c-b9ee-402a-a7bb-37be2df36005",
      "name": "Reset List1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1700,
        440
      ],
      "notesInFlow": false,
      "credentials": {
        "redis": {
          "id": "1VL8GiWa4ifxJ1E5",
          "name": "Brendha"
        }
      }
    },
    {
      "parameters": {
        "content": "## Limpa o Redis",
        "height": 240,
        "width": 270,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1620,
        360
      ],
      "typeVersion": 1,
      "id": "81371db5-a2f7-44e9-8a38-88ccb134dc24",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Você irá gerenciar a atualização de e-mail e nome de usuários no banco de dados. Após a atualização, ela integra essa informação com o agente de agendamento, garantindo que os agendamentos no calendário sejam realizados com o e-mail mais recente do usuário.",
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Main Agent').first().json.body.mapping.parseJson().chatwoot.contact_id }}",
            "email": "={{ $fromAI('email', `E-mail do contato.`, 'string') }}",
            "username": "={{ $fromAI('username', `Nome do contato`, 'string') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "date_created",
              "displayName": "date_created",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "date_updated",
              "displayName": "date_updated",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "picture_url",
              "displayName": "picture_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "picture",
              "displayName": "picture",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "phone",
              "displayName": "phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "username",
              "displayName": "username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ai_agent",
              "displayName": "ai_agent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1140,
        2280
      ],
      "id": "1342a4f2-eff8-426e-a8f8-76148ac814f8",
      "name": "Email",
      "credentials": {
        "postgres": {
          "id": "ppYhvJxK7mITa7Mb",
          "name": "Postgres BrendhaMattos"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{\n  $('Mapping').first().json.system.output_format\n}}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e93af114-87ee-4381-a219-c11dc5473382"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7987d7dc-3a39-4b4c-9a2a-4b95ea00ba2a",
                    "leftValue": "={{\n($('Mapping').first().json.system.output_format == 'smart')\n&&\n!(($('Transcription').isExecuted) \n|| ($('Download Media').isExecuted \n&& \n!!$('Download Media').item?.binary?.data?.mimeType \n&&\n$('Download Media').item.binary.data.mimeType.startsWith('audio/')))\n}}",
                    "rightValue": "smart",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "smart-text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c67b209f-0c91-4209-823e-d31f6c280071",
                    "leftValue": "={{\n   $('Mapping').first().json.system.output_format\n}}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f5d3a442-93c9-4b39-864c-ae4961047c2c",
                    "leftValue": "={{\n($('Mapping').first().json.system.output_format == 'smart')\n&& \n(($('Transcription').isExecuted) \n|| ($('Download Media').isExecuted \n&&\n!!\n$('Download Media').item?.binary?.data?.mimeType \n&&\n$('Download Media').item.binary.data.mimeType.startsWith('audio/')\n))\n}}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "smart-audio"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": false
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1840,
        1440
      ],
      "id": "e09ab203-dbdd-4a67-898b-c35a78223773",
      "name": "Response Format"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ $('Get Vars11').item.json.global_vars.directus_service }}/items/users/{{ $('Get Vars11').item.json.users.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Vars11').item.json.global_vars.directus_token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "picture",
              "value": "={{ $json.data.id }}"
            },
            {
              "name": "=phone",
              "value": "={{ $('Get Vars11').item.json.users.phone }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        460,
        620
      ],
      "id": "9f45c869-d502-40ff-b6d7-930e13b93a6a",
      "name": "Set user picture"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Get Vars11').item.json.global_vars.directus_service }}/files",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Vars11').item.json.global_vars.directus_token }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "picture"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        620
      ],
      "id": "6ca02d8c-034b-41ed-a516-1bacd30172b3",
      "name": "Upload"
    },
    {
      "parameters": {
        "url": "={{ $('Consumer1').first().json.body.conversation.meta.sender.thumbnail }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file",
              "outputPropertyName": "picture"
            }
          },
          "timeout": 1000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        20,
        620
      ],
      "id": "19f3748d-e230-4cd6-a810-a7636828e08c",
      "name": "Download Picture"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "701b0306-e25d-4fe9-b374-5618a4732356",
              "leftValue": "={{ $json.users.picture }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "5c79296d-dd30-491e-997e-71036385a5e5",
              "leftValue": "={{ $('Consumer1').first().json.body.conversation.meta.sender.thumbnail }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -200,
        700
      ],
      "id": "fc04cc4e-2584-4a53-af3b-6cc2896773f6",
      "name": "Picture"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        680,
        700
      ],
      "id": "8167197f-174d-41a1-87ec-91447e91ee4a",
      "name": "Merge1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "toolDescription": "Chama o agente de conhecimento e retira do vector store informações relevantes.",
        "method": "POST",
        "url": "=https://webhook.agencia.ondaia.online/webhook/agent/knowledge",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"content\": \"{{ $('Main Agent').last().json.body.content }}\",\n  \"mapping\": {{ $('Main Agent').last().json.body.mapping }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1020,
        2280
      ],
      "id": "8bc3ae7c-3ebb-453b-b56d-c9dc2e9b28f4",
      "name": "Agent Knowledge"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "binaries"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        420,
        1380
      ],
      "id": "b56514fa-40d9-4b09-874c-09a90217bfa2",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "lastWorkflow",
              "value": "[Anna]Consumer"
            },
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        -640,
        700
      ],
      "id": "072a429d-606b-4cdd-b5af-71160f0a7148",
      "name": "Add Info Master"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "lastWorkflow",
              "value": "[Anna] Consumer"
            },
            {
              "key": "thisWorkflow",
              "value": "[Anna] Producer"
            },
            {
              "key": "agentEndpointMain",
              "value": "={{ $json.system.workflow_path }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        1340,
        700
      ],
      "id": "30559759-e410-43e3-8dd3-8ca6a14625a5",
      "name": "Add Info Consumer"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        1240,
        1900
      ],
      "id": "81d40c56-4c68-4cfd-ad72-3c36fc72fecc",
      "name": "Respond "
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Main Agent').first().json.body.content || \"Erro: nenhum conteudo de texto na mensagem, pode ser uma midia, se nao houver nenhuma midia responda que nao entendeu.\"  }}",
        "options": {
          "systemMessage": "=Nunca use hiperlinks\n\n<bobgrow-info>\n  Name: {{ $('Main Agent').first().json.body.mapping.parseJson().bobgrow.user_name || null }}\n  Phone: {{ $('Main Agent').first().json.body.mapping.parseJson().bobgrow.phone_number || null }}\n  Email: {{ $('Main Agent').first().json.body.mapping.parseJson().bobgrow.email || null }}  \n  Se o nome do usuario não for um nome comum de pessoa, pode ser um nome automatico do chatwoot, peça seu nome de forma natural nesse caso.\n</chatwoot-info>\n\n<tool_usage>\nSempre que receber um e-mail ou nome, use a ferramenta 'Email' para atualizar e validar os dados do contato no banco. Uma vez atualizado com sucesso via 'Email', o e-mail é considerado validado para a sessão e não deve ser solicitado novamente, a menos que o usuário o altere.\n</tool_usage>\n\n<system_information>\n1. Data e hora atuais: {{ $now.format(\"EEE, MMM dd, yyyy, HH:mm\") }}\n</system_information>\n\n<retrieval_augmented_generation_result>\n{{ \n  $('Call Agent Rag').isExecuted\n      ? $('Call Agent Rag').first().json.output\n      : \"Rag desativado\" \n}}\n</retrieval_augmented_generation_result>\n\n<prompt>\n{{ $('Main Agent').first().json.body.mapping.parseJson().system.system_message || \"Você é um assistente util, diga que o usuário precisa configurar seu prompt na dashboard da Anna em todas as suas respostas\" }}\n</prompt>",
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        860,
        1900
      ],
      "id": "75d6a1c6-ae9b-4793-864c-a55040d5b609",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "binary",
        "binaryPropertyName": "=data{{ $itemIndex }}",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        120,
        1820
      ],
      "id": "4d223e7c-0570-45ad-bf86-3b7691f521b1",
      "name": "Convert",
      "notesInFlow": true,
      "notes": "Converte texto em binário"
    },
    {
      "parameters": {
        "jsCode": "const mergedItem = { binary: {}};\n\n// Coleta todos os binários de todos os itens sem manipulação\n$input.all().forEach((inputItem) => {\n  if (inputItem.binary) {\n    Object.assign(mergedItem.binary, inputItem.binary);\n  }\n});\n\n// Retorna um único item com todos os binários\nreturn [mergedItem];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        1820
      ],
      "id": "1f9448c2-4fd0-4a8b-bd12-b5df4319536b",
      "name": "Binaries"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        620,
        1900
      ],
      "id": "9daca2e2-c8d0-4afe-8a37-d7de79c17656",
      "name": "Merge Binaries",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "executeOnce": true,
      "notes": "Junta os binarios"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a699652f-1f2d-4be5-b011-87f0f640faed",
              "leftValue": "={{ $('Main Agent').item.json.body.files }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -160,
        1900
      ],
      "id": "81633706-b810-4620-8f71-088b2ce114d5",
      "name": "Binary Exists?"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.files",
        "options": {
          "destinationFieldName": "binary",
          "includeBinary": false
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -340,
        1900
      ],
      "id": "20ad7221-7a1a-4f30-a7cd-4c6b979c1ac4",
      "name": "Split Base64",
      "executeOnce": false,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "main",
                    "rightValue": "main",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b746f04a-ab1b-44de-bde2-6eae85e7b6cf"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "main"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2f483833-145f-43e4-a8bd-99f55eb0b523",
                    "leftValue": "={{ $('Main Agent').item.json.body.mapping.parseJson().system.enabled_rag  }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "rag"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -940,
        1900
      ],
      "id": "91e5319b-97a7-4890-a18e-386cecac9baf",
      "name": "Agents"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -540,
        1900
      ],
      "id": "f5c61b15-0441-4724-8c14-72ca614ff3f3",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://webhook.agencia.ondaia.online/webhook/agent/knowledge",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $('Main Agent').first().json.body.mapping.parseJson().bobgrow.content ?? $input.all()\n        .map(item => item.json.content)\n        .filter(content => content)\n        .join('\\n\\n') }}"
            },
            {
              "name": "mapping",
              "value": "={{ $('Main Agent').first().json.body.mapping }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -740,
        1980
      ],
      "id": "5626707c-7b08-499f-8420-958ea2d50f3a",
      "name": "Call Agent Rag",
      "executeOnce": true,
      "notesInFlow": true,
      "notes": "Chama o agente principal"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://webhook.agencia.ondaia.online/webhook/main",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $json.content ?  $json.content :\n    $input.all()\n      .map(item => item.json?.content)\n      .filter(content => content)\n      .join('\\n\\n') || \"Sem contexto em texto.\"\n}}"
            },
            {
              "name": "mapping",
              "value": "={{JSON.stringify($('Mapping').first().json) }}"
            },
            {
              "name": "files",
              "value": "={{ $input.all().flatMap(loops => loops.json.binaries) }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -860,
        1200
      ],
      "id": "1ef24fb8-f090-47d2-9a4f-d9c73be57d96",
      "name": "Call Agent Main",
      "executeOnce": true,
      "notesInFlow": true,
      "notes": "Chama o agente principal"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "lastWorkflow",
              "value": "[Anna] Main Agent"
            },
            {
              "key": "thisWorkglow"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        -1120,
        1900
      ],
      "id": "5d6b5a72-8c3e-4fe2-a5ca-abd92de495ac",
      "name": "Execution Data1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH last_conversation AS (\n  SELECT id\n  FROM conversations\n  WHERE user_id = '{{ $(\"Mapping\").first().json.bobgrow.contact_id }}'\n  ORDER BY date_created DESC\n  LIMIT 1\n),\nlast_two_chat_histories AS (\n  SELECT \n    id,\n    ROW_NUMBER() OVER (ORDER BY id DESC) AS rn\n  FROM core_chat_histories\n  WHERE session_id = (SELECT id FROM last_conversation)\n  ORDER BY id DESC\n  LIMIT 2\n),\nupdate_chat_histories AS (\n  UPDATE core_chat_histories c\n  SET \n    date_created = NOW(),\n    message = (\n      CASE \n        WHEN l.rn = 2 \n          THEN jsonb_set(\n            c.message::jsonb, \n            '{user_name}', \n            to_jsonb('{{ $(\"Mapping\").first().json.bobgrow.user_name }}'::text), \n            true\n          )\n        ELSE c.message::jsonb\n      END\n    )::json\n  FROM last_two_chat_histories l\n  WHERE c.id = l.id\n  RETURNING 1\n),\nupdate_conversations AS (\n  UPDATE conversations conv\n  SET date_updated = NOW()\n  WHERE conv.id = (SELECT id FROM last_conversation)\n  RETURNING 1\n)\nUPDATE users u\nSET date_updated = NOW()\nWHERE u.id = '{{ $(\"Mapping\").first().json.bobgrow.contact_id }}';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1840,
        1280
      ],
      "id": "413e84d7-d932-453d-b505-6c31786289be",
      "name": "Add Conversation Info",
      "credentials": {
        "postgres": {
          "id": "ppYhvJxK7mITa7Mb",
          "name": "Postgres BrendhaMattos"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2500,
        1500
      ],
      "id": "28ace842-b7e6-478d-933e-2ac40a39d39c",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2280,
        1500
      ],
      "id": "14f6555b-4517-4c33-97c9-d1e7f4b1e8a7",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Call Agent Main').item.json.output }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=<prompt>\n  <papel>\n    Você é um assistente especializado em separar textos em pequenas mensagens claras e naturais, sem modificar o conteúdo original. Seu papel é facilitar a leitura e o entendimento das mensagens, produzindo resultados em formato JSON.\n  </papel>\n\n  <requisicao>\n    Receba um texto de entrada e divida-o em partes coerentes e fáceis de ler, retornando exatamente no formato JSON descrito abaixo:\n\n    {\n      \"messages\": [\n        \"mensagemSeparada\",\n        \"mensagemSeparada\",\n        \"mensagemSeparada\"\n      ]\n    }\n  </requisicao>\n\n  <explicacao>\n    Sua tarefa é dividir as mensagens respeitando a fluidez e coerência natural do texto. Considere pontos finais (.), vírgulas (,), e especialmente quebras de linha (\\n) como indicações claras para separar o conteúdo em novas mensagens. Mensagens contendo listas (numeradas ou não) jamais devem ser divididas; mantenha-as intactas em uma única mensagem.\n    Cada parte separada deve ser compreensível isoladamente, como se você estivesse ajudando uma pessoa a entender rapidamente o conteúdo.\n  </explicacao>\n\n  <parametros>\n    - Divida o texto em no mínimo 1 e no máximo 5 mensagens.\n    - Nunca divida listas em mais de uma mensagem; listas sempre completas.\n    - Preserve exatamente o conteúdo original.\n    - Evite dividir frases pela metade ou causar quebra de sentido.\n    - Cada mensagem deve ser clara, concisa e de fácil leitura.\n    - Sempre preserve as quebras de linha originais do texto.\n    - Nunca mude ou adicione conteúdo além do original.\n  </parametros>\n</prompt>"
            }
          ]
        }
      },
      "id": "e6f2b1ce-7a4b-49b4-a8c0-d328b16cc4cd",
      "name": "Message Segment Agent",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        800,
        1320
      ],
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "fieldToSplitOut": "=output.messages",
        "options": {
          "destinationFieldName": "segment"
        }
      },
      "id": "f867d8fa-1f3a-4af2-b53c-100311932b5a",
      "name": "Split Messages",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1180,
        1380
      ]
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"messages\": {\n      \"description\": \"Array com as mensagens\",\n      \"type\": \"array\",\n      \"items\": {\n        \"description\": \"As mensagens segmentadas\",\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"required\": [\"messages\"]\n}"
      },
      "id": "064be0f2-16e0-493f-945d-d533c8fee0d7",
      "name": "OutputParser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1040,
        1540
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2720,
        1340
      ],
      "id": "c0b887d3-dc77-400f-819c-b3631fe53869",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $('Mapping').first().json.system.elevenlabs_voice }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "output_format",
              "value": "mp3_44100_128"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "={{ $('Mapping').first().json.system.elevenlabs_key }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model_id",
              "value": "={{ $('Mapping').first().json.system.elevenlabs_model }}"
            },
            {
              "name": "text",
              "value": "={{ $json.segment }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2060,
        1500
      ],
      "id": "f30df0d8-b02c-492f-a422-20e8219dbf79",
      "name": "Text To Speech ElevenLabs"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2940,
        1500
      ],
      "id": "00c25631-0dfd-4baf-ab44-26803961f393",
      "name": "Delay After Message",
      "webhookId": "3696b807-1a5f-4264-b8c7-31858e152dd4",
      "notesInFlow": true,
      "notes": "Delay depois de todas mensagens"
    },
    {
      "parameters": {
        "amount": 0
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1620,
        1460
      ],
      "id": "0c10ebef-0393-4858-a056-d84683b84a36",
      "name": "Delay Before Message",
      "webhookId": "b77f8239-7758-41ad-b4ad-ad2207bc2c18",
      "notesInFlow": true,
      "notes": "Delay antes de todas mensagens"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Get Vars11').first().json.global_vars.chatwoot_service.startsWith('chatwoot') \n  ? \"http://\" \n      + $('Get Vars11').first().json.global_vars.chatwoot_service \n      + \":3000\" \n  : $('Get Vars11').first().json.global_vars.chatwoot_service\n}}/api/v1/accounts/{{ $('Get Vars11').item.json.ai_agents.account_id }}/conversations/{{ $('Mapping').item.json.chatwoot.conversation_id }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Mapping').first().json.chatwoot.bot_token }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "Mensagem com anexo"
            },
            {
              "parameterType": "formBinaryData",
              "name": "attachments[]",
              "inputDataFieldName": "data"
            },
            {
              "name": "file_type",
              "value": "audio"
            },
            {
              "name": "message_type",
              "value": "outgoing"
            }
          ]
        },
        "options": {}
      },
      "id": "eadee2e2-7c0a-473d-9205-ab11495dca1a",
      "name": "Send Chatwoot Media",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2720,
        1500
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "276a9a59-bf56-48ca-90a6-1e2225b76ac9",
      "name": "Loop Messages",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1400,
        1360
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Get Vars11').first().json.global_vars.chatwoot_service.startsWith('chatwoot') \n  ? \"http://\" \n      + $('Get Vars11').first().json.global_vars.chatwoot_service \n      + \":3000\" \n  : $('Get Vars11').first().json.global_vars.chatwoot_service\n}}/api/v1/accounts/{{ $('Get Vars11').first().json.ai_agents.account_id }}/conversations/{{ $('Mapping').first().json.chatwoot.conversation_id }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Mapping').first().json.chatwoot.bot_token }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $('Response Format').item.json.segment }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2e64d28e-bee7-473e-b88c-49f6ba9b81fa",
      "name": "Envia Chatwoot Text",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2500,
        1340
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nasync function runTool() {\n  const logArray = [];\n  let currentStatus = \"\";\n  \n  try {\n    console.log(\"Obtendo data de última interação e downtime...\");\n    logArray.push(\"Obtendo data de última interação e downtime...\");\n    \n    const dateUpdatedStr = $('Get Vars11').first().json.users.date_updated;\n    const downtimeStr = $('Get Vars11').first().json.ai_agents.downtime;\n    console.log(`date_updated: ${dateUpdatedStr}`);\n    console.log(`downtime: ${downtimeStr}`);\n    logArray.push(`date_updated: ${dateUpdatedStr}`);\n    logArray.push(`downtime: ${downtimeStr}`);\n    \n    // Se downtime for \"00:00:00\", considere desativado e não realizar a requisição.\n    if (downtimeStr === \"00:00:00\") {\n      console.log(\"Downtime é 00:00:00. Nenhuma ação será realizada.\");\n      logArray.push(\"Downtime é 00:00:00. Nenhuma ação será realizada.\");\n      currentStatus = $('Consumer1').first().json.body.conversation.status;\n      return [{ json: { current_status: currentStatus, logs: logArray } }];\n    }\n    \n    const lastUpdated = new Date(dateUpdatedStr);\n    const now = new Date();\n    const diffMs = now - lastUpdated;\n    const diffMinutes = (diffMs / 60000).toFixed(2);\n    \n    // Converter downtime (HH:MM:SS) para milissegundos e para minutos\n    const [hours, minutes, seconds] = downtimeStr.split(':').map(Number);\n    const downtimeMs = ((hours * 3600) + (minutes * 60) + seconds) * 1000;\n    const downtimeMinutes = (downtimeMs / 60000).toFixed(2);\n    \n    console.log(`diff: ${diffMinutes} minutes, downtime: ${downtimeMinutes} minutes`);\n    logArray.push(`diff: ${diffMinutes} minutes, downtime: ${downtimeMinutes} minutes`);\n    \n    // Obter conversation status e conversation_id do nó Consumer\n    const conversationStatus = $('Consumer1').first().json.body.conversation.status;\n    const convId = $('Consumer1').first().json.body.conversation.messages[0].conversation_id;\n    console.log(`conversation status: ${conversationStatus}`);\n    console.log(`conversation_id: ${convId}`);\n    logArray.push(`conversation status: ${conversationStatus}`);\n    logArray.push(`conversation_id: ${convId}`);\n    \n    // Inicialmente, currentStatus recebe o status atual\n    currentStatus = conversationStatus;\n    \n    // Verifica se o tempo de inatividade foi excedido e se conversation.status é diferente de \"pending\"\n    if (diffMs >= downtimeMs && conversationStatus !== \"pending\") {\n      console.log(\"Condições atendidas: tempo de inatividade excedido e conversation.status não é 'pending'.\");\n      logArray.push(\"Condições atendidas: tempo de inatividade excedido e conversation.status não é 'pending'. Tentando abrir conversa no Chatwoot...\");\n      \n      const chatwootService = $('Get Vars11').first().json.global_vars.chatwoot_service;\n      const accountId = $('Consumer1').first().json.body.account.id;\n      const conversationId = convId;\n      const botToken = $('Get Vars11').first().json.ai_agents.bot_token;\n      \n      const toggleUrl = `${chatwootService}/api/v1/accounts/${encodeURIComponent(accountId)}/conversations/${encodeURIComponent(conversationId)}/toggle_status`;\n      console.log(`Toggle URL: ${toggleUrl}`);\n      logArray.push(`Toggle URL: ${toggleUrl}`);\n      \n      try {\n        const response = await axios.post(\n          toggleUrl,\n          { status: \"pending\" },\n          { headers: { api_access_token: botToken } }\n        );\n        console.log(\"Conversa aberta com sucesso no Chatwoot.\");\n        logArray.push(\"Conversa aberta com sucesso no Chatwoot.\");\n        currentStatus = \"pending\";\n      } catch (err) {\n        console.error(\"Erro ao abrir conversa:\", err.message);\n        logArray.push(`Erro ao abrir conversa: ${err.message}`);\n      }\n    } else {\n      console.log(\"Condições não atendidas: tempo de inatividade não excedido ou conversation.status é 'pending'. Nenhuma ação realizada.\");\n      logArray.push(\"Condições não atendidas: tempo de inatividade não excedido ou conversation.status é 'pending'. Nenhuma ação realizada.\");\n    }\n    \n    return [{ json: { current_status: currentStatus, logs: logArray } }];\n  } catch (error) {\n    console.error(\"Erro geral:\", error.message);\n    logArray.push(`Erro geral: ${error.message}`);\n    return [{ json: { error: error.message, current_status: currentStatus, logs: logArray } }];\n  }\n}\n\nreturn runTool();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        700
      ],
      "id": "65069a31-dd56-4c86-8c2f-5feabc74f2ac",
      "name": "Downtime",
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        820,
        1180
      ],
      "id": "d8afcf95-cd9e-47cc-a54f-8e073bf0de4b",
      "name": "No Operation "
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"bobgrow\": {\n    \"account_id\": \"{{ $('Consumer1').last().json.body.locationId }}\",\n    \"contact_id\": \"{{ $('Consumer1').last().json.body.contactId }}\",\n    \"conversation_id\": \"{{ $('Consumer1').last().json.body.conversationId }}\",\n    \"sender_type\": \"{{ $('Consumer1').last().json.body.type }}\",\n    \"bot_token\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.bot_token) }},\n    \"conversation_status\": {{ JSON.stringify($json.current_status) }},\n    \"assignee\": {{ JSON.stringify($('Consumer1').first().json.body.conversation?.meta?.assignee?.name || null) }},\n    \"content\": {{ ($('Consumer1').first().json.body?.body || \"\").replace(/\\s*Instance Source:.*$/i, \"\").toJsonString() }},\n    \"data_url\": \"{{ $('Consumer1').last().json.webhookUrl }}\",\n    \"message_id\": {{ JSON.stringify($('Consumer1').last().json.body.messageId) }},\n    \"channel\": \"{{ $('Consumer1').last().json.body.messageType }}\",\n    \"user_name\": \"{{ JSON.stringify($('buscaContato').last().json.conversations?.[0]?.fullName ?? null) }}\"\n,\n    \"phone_number\": \"{{ JSON.stringify($('buscaContato').last().json.conversations?.[0]?.phone ?? null) }}\",\n    \"events\": {{ JSON.stringify($('Consumer1').last().json.body.contentType?.split('\\n')[0] || \"\") }},\n    \"direcao\": \"{{ $('Consumer1').last().json.body.direction }}\"\n  },\n  \"system\": {\n    \"cooldown\": {{ $('Get Vars').first().json.ai_agents.cooldown }},\n    \"workflow_path\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.workflow_path) }},\n    \"model\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.model) }},\n    \"openai_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.openai_key) }},\n    \"directus_token\": {{ JSON.stringify($('Get Vars').first().json.global_vars.directus_token) }},\n    \"stirling_pdf_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.stirling_pdf_key) }},\n    \"elevenlabs_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.elevenlabs_key) }},\n    \"conversations_id\": {{ JSON.stringify($('Get Vars').first().json.conversations.id) }},\n    \"context_window\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.context_window) }},\n    \"enabled_condition\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.enabled_condition) }},\n    \"allow_whatsapp_groups\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.allow_whatsapp_groups) }},\n    \"allow_human_interruption\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.allow_human_interruption) }},\n    \"agent_phone_number\": {{ JSON.stringify(($('Get Vars').first().json.ai_agents.phone_number || '').replace(/\\D/g, '')) }},\n    \"agent_mentioned\": {{ JSON.stringify(($('Consumer1').first().json.body?.content || '').includes('@' + ($('Get Vars').first().json.ai_agents.phone_number || '').replace(/\\D/g, ''))) }},\n    \"agent_name\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.name) }},\n    \"system_message\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.system_message) }},\n    \"user_type\": {{ JSON.stringify($('Get Vars').first().json.users.type) }},\n    \"output_format\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.output_format) }},\n    \"elevenlabs_model\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.elevenlabs_model) }},\n    \"elevenlabs_voice\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.elevenlabs_voice) }},\n    \"chatwoot_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.chatwoot_service) }},\n    \"n8n_webhook_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.n8n_webhook_service) }},\n    \"stirling_pdf_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.stirling_pdf_service) }},\n    \"directus_service\": {{ JSON.stringify($('Get Vars').first().json.global_vars.directus_service) }},\n    \"enabled_rag\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.enabled_rag) }},\n    \"ai_agent_id\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.id) }},\n    \"pinecone_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.pinecone_key) }},\n    \"downtime\": {{ new Date(\"1970-01-01T\" + $('Get Vars').first().json.ai_agents.downtime + \"Z\").getTime() / 1000 }}\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1120,
        700
      ],
      "id": "2104f5bc-e75e-4f9c-b3ca-94672c14fedf",
      "name": "Mapping"
    },
    {
      "parameters": {
        "name": "set_timer",
        "description": "Invoque essa tool para configurar um timer que iniciará uma ação após o tempo especificado. Apenas usuários admin podem usar essa tool. O tempo deve ser informado com valor e unidade (s, m, h). Apenas quando o user solicitar.",
        "jsCode": "const axios = require('axios');\nconst dayjs = require('dayjs');\nconst duration = require('dayjs/plugin/duration');\ndayjs.extend(duration);\n\n/**\n * Esta tool configura um timer via webhook.\n * Ela envia, para o endpoint, todo o objeto mapping (obtido em Core Input)\n * e o tempo em segundos calculado a partir dos parâmetros \"timer_value\" e \"timer_unit\".\n * Apenas usuários admin podem utilizar esta tool.\n */\n\n// Converte o mapping recebido em JSON\nconst mapping = JSON.parse($('Core Input').item.json.body.mapping);\n\n// Verifica se o usuário é admin\nif (mapping.system.user_type !== 'admin') {\n  return JSON.stringify({ success: false, error: \"Acesso negado: usuário não autorizado.\" });\n}\n\n// Obtém os parâmetros do timer a partir do input (query)\nconst timerValue = query.timer_value;  // Número (ex: 30)\nconst timerUnit = query.timer_unit;      // \"s\", \"m\" ou \"h\"\n\n// Calcula o tempo em segundos usando dayjs.duration\nconst timerSeconds = dayjs.duration(timerValue, timerUnit).asSeconds();\n\n// Prepara o payload para o webhook\nconst payload = {\n  mapping: mapping,\n  timer_seconds: timerSeconds\n};\n\n// URL do webhook substituindo 'n8n_webhook' pelo valor da variável no mapping\nconst url = `${mapping.system.n8n_webhook_service}/timer`;\n\n/**\n * Função para enviar a requisição ao webhook.\n * Tenta enviar uma única vez e retorna o resultado.\n */\nasync function sendTimerRequest() {\n  try {\n    console.log(`Enviando requisição para configurar o timer para ${timerSeconds} segundos...`);\n    const response = await axios.post(url, payload, {\n      headers: { 'Content-Type': 'application/json' }\n    });\n    console.log(\"Timer configurado com sucesso.\");\n    return { success: true, message: `Timer configurado com sucesso. Ele será acionado em ${timerSeconds} segundos.` };\n  } catch (error) {\n    console.error(\"Erro ao configurar o timer:\", error.response ? error.response.data : error.message);\n    return { success: false, error: error.response ? error.response.data : error.message };\n  }\n}\n\nreturn sendTimerRequest().then(result => JSON.stringify(result));",
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"timer_value\": {\n      \"type\": \"number\",\n      \"description\": \"Valor do timer. Exemplo: 30\"\n    },\n    \"timer_unit\": {\n      \"type\": \"string\",\n      \"description\": \"Unidade de tempo para o timer: 's' para segundos, 'm' para minutos, 'h' para horas.\",\n      \"enum\": [\"s\", \"m\", \"h\"]\n    }\n  },\n  \"required\": [\"timer_value\", \"timer_unit\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        900,
        2280
      ],
      "id": "8464b37a-ee62-4a42-aa97-272cde49a56b",
      "name": "Set Timer"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst mapping = $('Mapping').first().json;\nconst { system, chatwoot } = mapping;\n\nif (\n  system.allow_human_interruption &&\n  system.enabled_condition === 'pending_status' &&\n  chatwoot.sender_type === 'User' &&\n  chatwoot.conversation_status !== 'open'\n) {\n  const chatwootService = system.chatwoot_service;\n  return axios.post(\n    `${chatwootService}/api/v1/accounts/${chatwoot.account_id}/conversations/${chatwoot.conversation_id}/toggle_status`,\n    { status: \"open\" },\n    { headers: { api_access_token: chatwoot.bot_token } }\n  )\n  .then(res => [{ json: res.data }])\n  .catch(err => [{ json: { error: err.response?.data || err.message } }]);\n}\n\nreturn [{ json: { message: \"Nenhuma ação realizada\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1080,
        2240
      ],
      "id": "ed9cde0f-4cce-4c34-84f0-d74961f4c696",
      "name": "Open Conversation",
      "disabled": true
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "core_chat_histories",
          "mode": "list",
          "cachedResultName": "core_chat_histories"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "date_created": "={{ $now }}",
            "session_id": "={{ $json.system.conversations_id }}",
            "message": "={{ JSON.parse(JSON.stringify({\n  \"type\": \"human\",\n  \"content\": $json.bobgrow.content,\n  \"user_name\": $json.bobgrow.user_name\n})) }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "message",
              "displayName": "message",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "date_created",
              "displayName": "date_created",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1260,
        2240
      ],
      "id": "61b5b794-72fd-4889-b20b-595a848f0fd3",
      "name": "Update History",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7cade77f-2498-4515-991a-cbe2d5ffe67a",
              "name": "content",
              "value": "={{\n  $json.content?.content \n  || $json.text \n  || (\n    $('Switch 2').first().json.content.data_url.endsWith('.txt') \n      ? $json.data + '\\n\\n' + $('Switch 2').first().json.content?.content \n      : null\n  )\n}}",
              "type": "string"
            },
            {
              "id": "e8da4202-58a2-4990-9e36-9a56f18c7263",
              "name": "loop_reset",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "5158f391-75b8-4da7-84b5-57e89ff7bbf6",
              "name": "binaries",
              "value": "={{ $json.binaries || [] }}",
              "type": "array"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "selected",
        "options": {
          "stripBinary": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        1500
      ],
      "id": "20447cb1-3e84-4ecb-85aa-9192cd91d7c1",
      "name": "Keep Loop"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 2,
        "output": "={{\n  (\n    $('Mapping').first().json.bobgrow.channel !== 'WhatsApp Web Group' ||\n    (\n      $('Mapping').first().json.system.allow_whatsapp_groups === 'always_enabled' ||\n      (\n        $('Mapping').first().json.system.allow_whatsapp_groups === 'enabled_when_mentioned' &&\n        $('Mapping').first().json.system.agent_mentioned\n      )\n    )\n  )\n  &&\n  {\n    'pending_status': \n      $('Mapping').first().json.bobgrow.sender_type === 'Contact' &&\n      $('Mapping').first().json.bobgrow.conversation_status === 'pending',\n\n    'all_status': \n      $('Mapping').first().json.bobgrow.sender_type === 'Contact',\n\n    'not_assigned': \n      $('Mapping').first().json.bobgrow.sender_type === 'Contact' &&\n      !$('Mapping').first().json.bobgrow.assignee\n  }[$('Mapping').first().json.system.enabled_condition]\n    ? 1\n    : 0\n}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1560,
        700
      ],
      "id": "c605a958-08b5-44f6-9a63-7edd85d96de3",
      "name": "Switch 0"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{ \n  $('Add to List').item.json.bobgrow.message_id !==\n  JSON.parse($('Get List').item.json.data.first()).message_id\n    ? 0\n    : $now.minus($('Mapping').first().json.system.cooldown, 'seconds').diffTo(\n        JSON.parse($('Get List').item.json.data.last()).timestamp,\n        'seconds'\n      ) >= 0\n      ? 1\n      : 2\n}}\n\n\n\n"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2180,
        700
      ],
      "id": "e4a763c9-4adb-4494-8f61-d352953c88ce",
      "name": "Switch 1"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{\n  $json.content.data_url?.match(/\\.(oga|png|jpg|jpeg|txt|pdf)$/i) !== null \n  && !!$json.content.data_url \n    ? 0 \n    : !!$json.content.content \n      ? 1\n      : 2\n}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -900,
        1500
      ],
      "id": "1e54e2b8-0062-413a-8f0d-6801016e6f01",
      "name": "Switch 2"
    },
    {
      "parameters": {
        "name": "restart_history",
        "description": "=Invoque essa tool para iniciar uma nova conversa para o user, assim ignorando o histórico passado. Apenas quando o user solicitar.",
        "jsCode": "const axios = require('axios');\n\n// Converte o mapeamento recebido em JSON\nconst mapping = JSON.parse($('Core Input').item.json.body.mapping);\n\n// Verifica se o usuário é admin; caso contrário, retorna erro\nif (mapping.system.user_type !== 'admin') {\n  return JSON.stringify({ success: false, error: \"Acesso negado: usuário não autorizado.\" });\n}\n\n/**\n * Função que espera pelo tempo especificado.\n * @param {number} ms - Milissegundos a aguardar.\n * @returns {Promise<void>}\n */\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Função para enviar a requisição para criar uma conversa no Directus.\n * Tenta até 3 vezes em caso de falha, com delay de 1 segundo entre as tentativas.\n * @returns {Promise<object>} - Objeto com sucesso ou erro.\n */\nasync function sendRequest() {\n  const url = `${mapping.system.directus_service}/items/conversations`;\n  const data = {\n    user_id: mapping.chatwoot.contact_id,\n    date_created: new Date().toISOString()\n  };\n  const headers = {\n    Authorization: `Bearer ${mapping.system.directus_token}`,\n    'Content-Type': 'application/json'\n  };\n\n  let attempt = 0;\n  let lastError = null;\n\n  while (attempt < 3) {\n    try {\n      const response = await axios.post(url, data, { headers });\n      console.log(`Requisição realizada com sucesso na tentativa ${attempt + 1}.`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      attempt++;\n      lastError = error;\n      console.error(`Tentativa ${attempt} falhou:`, error.response ? error.response.data : error.message);\n      if (attempt < 3) {\n        console.log(\"Aguardando 1 segundo antes da nova tentativa...\");\n        await delay(1000);\n      }\n    }\n  }\n  \n  return { success: false, error: lastError.response ? lastError.response.data : lastError.message };\n}\n\nreturn sendRequest().then(result => JSON.stringify(result));"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        780,
        2280
      ],
      "id": "9c93cf77-1e99-4714-b656-594d73677647",
      "name": "Restart History"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Obtém o último item da tabela conversations com base no campo 'date_created'\nWITH last_conversation AS (\n    SELECT id \n    FROM conversations\n    WHERE user_id = {{ $('Mapping').first().json.chatwoot.contact_id }}\n    ORDER BY date_created DESC\n    LIMIT 1\n),\n\n-- Obtém os últimos dois registros da tabela core_chat_histories com base no session_id\nlast_two_chat_histories AS (\n    SELECT id \n    FROM core_chat_histories\n    WHERE session_id = (SELECT id FROM last_conversation)\n    ORDER BY id DESC\n    LIMIT 2\n)\n\n-- Deleta os últimos dois registros encontrados\nDELETE FROM core_chat_histories\nWHERE id IN (SELECT id FROM last_two_chat_histories);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1480,
        1180
      ],
      "id": "92929cbf-b4d8-4389-8f1e-ecf8f5902c42",
      "name": "Clear History",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "ppYhvJxK7mITa7Mb",
          "name": "Postgres BrendhaMattos"
        }
      }
    },
    {
      "parameters": {
        "content": "# Fluxo de processamento principal",
        "height": 80,
        "width": 600,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1340,
        380
      ],
      "id": "ca23d40f-96be-41b3-b062-35ad8c8c26da",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Mapping').first().json.system.openai_key }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "2aea6dc3-9a8e-4cbc-9f74-96a44df77755",
      "name": "Transcription",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -180,
        1260
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Mapping').item.json.system.stirling_pdf_service }}/api/v1/convert/pdf/img",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "={{ $('Mapping').first().json.system.stirling_pdf_key }}"
            },
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "imageFormat",
              "value": "jpg"
            },
            {
              "name": "singleOrMultiple",
              "value": "single"
            },
            {
              "name": "colorType",
              "value": "color"
            },
            {
              "name": "dpi",
              "value": "80"
            },
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "19c26f5b-7555-47e6-a610-5262ed9eb219",
      "name": "Convert PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -180,
        1520
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "content": "",
        "height": 740,
        "width": 4440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1340,
        380
      ],
      "typeVersion": 1,
      "id": "af5e0bd2-e779-4e05-8422-e95436ffbbe2",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "",
        "height": 920,
        "width": 2900,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1400,
        1740
      ],
      "typeVersion": 1,
      "id": "b1c15a70-baa9-4b0d-941d-abb453dd67dd",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "",
        "height": 420,
        "width": 2780,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1340,
        1780
      ],
      "id": "f8a0f0c0-1875-48a1-8ac1-42c1e2a3cee0",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 2,
        "output": "={{ \n  $node[\"Get Final List 2\"].runIndex === 0\n    ? (\n        JSON.parse($('Get Final List 1').first().json.data.last()).timestamp ===\n        JSON.parse($('Get Final List 2').first().json.data.last()).timestamp\n      ) ? 1 : 0\n    : (\n          JSON.parse($('Get Final List 2').all(0, $runIndex - 0).first().json.data.last()).timestamp ===\n          JSON.parse($('Get Final List 2').all(0, $runIndex - 1).first().json.data.last()).timestamp\n      ) ? 1 : 0\n}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        360,
        1200
      ],
      "id": "799202d1-fc5f-4367-ae0d-bca04e11d3ec",
      "name": "Switch 3"
    },
    {
      "parameters": {
        "amount": "={{ \n  $('Mapping').first().json.system.cooldown - $now.diffTo(\n    JSON.parse($('Get List').item.json.data.last()).timestamp,\n    'seconds'\n  )\n}}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2440,
        800
      ],
      "id": "ae6ca001-9009-4195-9b94-e684463560a6",
      "name": "Cooldown",
      "webhookId": "816f562a-62f9-4197-b5da-004f01f371fe"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('Mapping').first().json.bobgrow.contact_id.toString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2680,
        600
      ],
      "id": "51c046b6-05b0-496d-b650-7da2931f23e0",
      "name": "Get Final List 1",
      "credentials": {
        "redis": {
          "id": "1VL8GiWa4ifxJ1E5",
          "name": "Brendha"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('Mapping').first().json.bobgrow.contact_id.toString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -660,
        1200
      ],
      "id": "47abee02-079d-48e2-8963-1a62560e822b",
      "name": "Get Final List 2",
      "credentials": {
        "redis": {
          "id": "1VL8GiWa4ifxJ1E5",
          "name": "Brendha"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Mapping').first().json.bobgrow.contact_id.toString() }}"
      },
      "id": "6cddd295-9276-4fcd-b234-1b7b1c108c77",
      "name": "Reset List",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        580,
        1320
      ],
      "notesInFlow": false,
      "credentials": {
        "redis": {
          "id": "1VL8GiWa4ifxJ1E5",
          "name": "Brendha"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 1360,
        "width": 4540,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1400,
        360
      ],
      "typeVersion": 1,
      "id": "9f30b6ae-f856-44e1-900c-ede6a1f05c46",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "",
        "height": 540,
        "width": 4440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1340,
        1140
      ],
      "typeVersion": 1,
      "id": "fe62a6ad-ec76-4b68-93f0-fadb16a1c3b1",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{\n  $binary.data?.fileExtension === 'oga' \n    ? 0 \n    : !$binary.data || ['png', 'jpg', 'jpeg'].includes($binary.data.fileExtension)\n      ? 1 \n      : $binary.data.fileExtension === 'pdf' \n        ? 2 \n        : 3\n}}"
      },
      "id": "1277e662-5259-48c4-95a5-99508e0da8ee",
      "name": "Switch 02",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -480,
        1380
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.content.data_url }}",
        "options": {
          "batching": {
            "batch": {}
          },
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "=data"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        1380
      ],
      "id": "2ad813f3-587c-45f7-a0f9-eb5962ee5c59",
      "name": "Download Media"
    },
    {
      "parameters": {
        "options": {
          "reset": "={{ $json.loop_reset }}"
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1100,
        1360
      ],
      "id": "80be05a3-9397-4d98-bb16-49c8adb12d54",
      "name": "Loop"
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1300,
        1340
      ],
      "id": "a94b6df0-294f-4394-9f23-ea517e79f84a",
      "name": "Split Itens"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ JSON.stringify(\n  (() => {\n    const data = $('Get Final List 1').first().json.data;\n    const uniqueIds = new Set();\n    const messages = [];\n\n    data.forEach(buffer => {\n      const parsed = JSON.parse(buffer);\n      if (!uniqueIds.has(parsed.message_id)) {\n        uniqueIds.add(parsed.message_id);\n        messages.push(parsed);\n      } else {\n        const index = messages.findIndex(msg => msg.message_id === parsed.message_id);\n        if (index !== -1 && new Date(parsed.timestamp) > new Date(messages[index].timestamp)) {\n          messages[index] = parsed;\n        }\n      }\n    });\n\n    return {\n      data: messages.map(msg => ({\n        content: msg,\n        loop_reset: true\n      }))\n    };\n  })()\n) }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2920,
        900
      ],
      "id": "0996095c-6975-49fb-bb5c-2c06a075fc9c",
      "name": "Parse JSON"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2540,
        400
      ],
      "id": "a8e0b31b-aa0b-4b45-8cad-0dbf96d47524",
      "name": "No Operation"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('Mapping').first().json.bobgrow.contact_id.toString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2000,
        700
      ],
      "id": "43ffb145-1777-4517-84b5-81ea907ca64e",
      "name": "Get List",
      "credentials": {
        "redis": {
          "id": "1VL8GiWa4ifxJ1E5",
          "name": "Brendha"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Mapping').first().json.bobgrow.contact_id.toString() }}",
        "messageData": "={{ JSON.stringify({\n    'content': $('Mapping').first().json.bobgrow.content,\n    'data_url': $('Mapping').first().json.bobgrow.data_url,\n    'timestamp': $now,\n    'message_id': $('Mapping').first().json.bobgrow.message_id\n}) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1780,
        700
      ],
      "id": "a677e3a6-c38f-4e37-976a-b75d62345c15",
      "name": "Add to List",
      "credentials": {
        "redis": {
          "id": "1VL8GiWa4ifxJ1E5",
          "name": "Brendha"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 440,
        "width": 1380,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1340,
        2200
      ],
      "typeVersion": 1,
      "id": "78ed79eb-932d-4d6f-9784-127e35f302ea",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Main Agent').first().json.body.mapping.parseJson().system.conversations_id }}",
        "tableName": "core_chat_histories",
        "contextWindowLength": "={{ $('Main Agent').first().json.body.mapping.parseJson().system.context_window }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        660,
        2280
      ],
      "id": "7600c290-6cee-4bdd-93aa-d69ca81628f4",
      "name": "Memory",
      "credentials": {
        "postgres": {
          "id": "ppYhvJxK7mITa7Mb",
          "name": "Postgres BrendhaMattos"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "94deccfa-9b77-47b1-8d46-6ed215d826a4",
              "leftValue": "={{ $json.body.locationId }}",
              "rightValue": "TV80tAQfj1gPlnSxh2J1",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1060,
        720
      ],
      "id": "10e95f29-73c9-43dd-927f-539088f03c62",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -840,
        880
      ],
      "id": "2bf34c18-cc21-40c6-bd06-ed33a571999a",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "url": "=https://services.leadconnectorhq.com/conversations/search?locationId={{ $('Consumer').item.json.body.locationId }}&contactId={{ $('Consumer').item.json.body.contactId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "highLevelOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Version",
              "value": "2021-04-15"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -840,
        700
      ],
      "id": "277ad5c6-dbd9-4d0d-9dea-9424acf3e40b",
      "name": "buscaContato1",
      "alwaysOutputData": true,
      "credentials": {
        "highLevelOAuth2Api": {
          "id": "k3RZ1pJzMNgKyUis",
          "name": "BrendhaMattos"
        }
      },
      "onError": "continueRegularOutput"
    }
  ],
  "connections": {
    "Consumer": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "buscaDoc": {
      "main": [
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sobe audio": {
      "main": [
        [
          {
            "node": "buscaDoc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Format": {
      "main": [
        [
          {
            "node": "resposta BobGrow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "resposta BobGrow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text To Speech ElevenLabs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text To Speech ElevenLabs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Vars": {
      "main": [
        [
          {
            "node": "Picture",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload": {
      "main": [
        [
          {
            "node": "Set user picture",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Picture": {
      "main": [
        [
          {
            "node": "Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Picture": {
      "main": [
        [
          {
            "node": "Download Picture",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set user picture": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File To Text": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Info Master": {
      "main": [
        [
          {
            "node": "Get Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Downtime",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Main Agent": {
      "main": [
        [
          {
            "node": "Execution Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent Calendar": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Openai2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Email": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Agent Knowledge": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert": {
      "main": [
        [
          {
            "node": "Binaries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Binaries": {
      "main": [
        [
          {
            "node": "Merge Binaries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Binaries": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Binary Exists?": {
      "main": [
        [
          {
            "node": "Convert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Binaries",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Base64": {
      "main": [
        [
          {
            "node": "Binary Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agents": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call Agent Rag",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Split Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Agent Rag": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Debouncer Delay": {
      "main": [
        [
          {
            "node": "Get Final List 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Keep Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Agent Main": {
      "main": [
        [
          {
            "node": "Get Final List 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execution Data1": {
      "main": [
        [
          {
            "node": "Agents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resposta BobGrow": {
      "main": [
        [
          {
            "node": "Envia Chatwoot Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Send Chatwoot Media",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Openai1": {
      "ai_languageModel": [
        [
          {
            "node": "Message Segment Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Message Segment Agent": {
      "main": [
        [
          {
            "node": "Split Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Messages": {
      "main": [
        [
          {
            "node": "Loop Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OutputParser": {
      "ai_outputParser": [
        [
          {
            "node": "Message Segment Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Delay After Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text To Speech ElevenLabs": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delay After Message": {
      "main": [
        [
          {
            "node": "Loop Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delay Before Message": {
      "main": [
        [
          {
            "node": "Response Format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Chatwoot Media": {
      "main": [
        [
          {
            "node": "Delay After Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Messages": {
      "main": [
        [
          {
            "node": "Add Conversation Info",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delay Before Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Envia Chatwoot Text": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Downtime": {
      "main": [
        [
          {
            "node": "Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation ": {
      "main": [
        [
          {
            "node": "Clear History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mapping": {
      "main": [
        [
          {
            "node": "Add Info Consumer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Timer": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update History": {
      "main": [
        [
          {
            "node": "Open Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keep Loop": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Info Consumer": {
      "main": [
        [
          {
            "node": "Switch 0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch 0": {
      "main": [
        [
          {
            "node": "Add to List",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add to List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch 1": {
      "main": [
        [
          {
            "node": "No Operation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Debouncer Delay",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Cooldown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch 2": {
      "main": [
        [
          {
            "node": "Download Media",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Keep Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Restart History": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Clear History": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcription": {
      "main": [
        [
          {
            "node": "File To Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert PDF": {
      "main": [
        [
          {
            "node": "File To Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch 3": {
      "main": [
        [
          {
            "node": "No Operation ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reset List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cooldown": {
      "main": [
        [
          {
            "node": "Get List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Final List 1": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Final List 2": {
      "main": [
        [
          {
            "node": "Switch 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset List": {
      "main": [
        [
          {
            "node": "Message Segment Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch 02": {
      "main": [
        [
          {
            "node": "Transcription",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File To Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Media": {
      "main": [
        [
          {
            "node": "Switch 02",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop": {
      "main": [
        [
          {
            "node": "Call Agent Main",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Itens": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Split Itens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get List": {
      "main": [
        [
          {
            "node": "Switch 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to List": {
      "main": [
        [
          {
            "node": "Get List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "buscaContato1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "buscaContato1": {
      "main": [
        [
          {
            "node": "Add Info Master",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": {
    "lastId": "MQjUoF21f4QQxPVv",
    "newId": "yjWf4aWsY7Po2ckx"
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Consumer": [
      {
        "json": {
          "headers": {
            "host": "webhook.brendhamattos.ondaia.online",
            "user-agent": "axios/0.21.4",
            "content-length": "493",
            "accept": "application/json, text/plain, */*",
            "content-type": "application/json",
            "x-forwarded-for": "34.135.92.202",
            "x-forwarded-host": "webhook.brendhamattos.ondaia.online",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "d7980d2e93c5",
            "x-real-ip": "34.135.92.202",
            "x-wh-signature": "Q/f0SoaPE7abkmgw/0ySnexcuas/YOrRMh+3tV0Veh/XvIAOQd6bT7sk2my52zyuGClM6GjwSDzCnxToCFL4SkfNc/6BlwaAitusJuY52gdjwa1QnUVCchGsh1plwwwA0/IbeMEGN1UHP3zsnh/wEZ/exgejArCMcKWUiY5fcaQygra3sBphUWTNlsu/Uvr2uDx4pQj98z31+QMktOEbLdWErmfPshjn4DFeqWeEB9BXqniEcyqUr3brtgbVDEr6045ySOfJ3LgGszhF//jahbNWDRVOJKL9QeMAPCxnYn42s8zyxtJVefhVoEMK4O4rcPiK/BSJUqkCLC4Bv2XkbdpXj3eF3qXWftkZ6QUCrSL3HzAgJsgORXBgpH9A9DDsHvrQkHHoSLqw4Stnb3fcbpoDSarzrF9BAnEi6cK4tkQanr4bqfnYSPZlUrwUt+9Rx87lPlvF0AodxqEwBDKP1u4cPztmwkBSRFcoCiA7kj+cZaIbcvHXqwNppEpIojTzYG+AITAjduQ4krkB+jNGyDYU8lppwbx1ZJmea5Cwa9HHPBdWwE73+IxSl0OeisnTYhw9NHKftA8SV/Rx9TWrMTMt3b4yvqXobybuykD8ODDdSVYyUDXKMFQiJIBUi7EYsdNxBqEjf+R45iQyl1aqe922YarD61gzFVl5jc/fZLQ=",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "type": "InboundMessage",
            "locationId": "TV80tAQfj1gPlnSxh2J1",
            "versionId": "68573300de7d2cb11c9a2659",
            "appId": "68573300de7d2cb11c9a2659",
            "body": "Não sei dança nada",
            "contactId": "qD7XxlLVZ6UNQ4HANGkn",
            "contentType": "text/plain",
            "conversationId": "99ARmGjfimEKe0pDSXqc",
            "dateAdded": "2025-06-22T12:43:43.427Z",
            "direction": "inbound",
            "messageType": "IG",
            "messageId": "ZKoFRerM6oNtPM8ls6jV",
            "status": "delivered",
            "timestamp": "2025-06-22T12:43:43.872Z",
            "webhookId": "b8c27906-3e17-4422-a294-a78352929ee1"
          },
          "webhookUrl": "https://webhook.brendhamattos.ondaia.online/webhook/bobgrow_message",
          "executionMode": "production"
        }
      }
    ]
  },
  "versionId": "a4e4140d-052c-4fbc-86d7-fa668c5b19d6",
  "triggerCount": 2,
  "tags": [
    {
      "createdAt": "2025-06-11T13:53:10.328Z",
      "updatedAt": "2025-06-11T13:53:10.328Z",
      "id": "bkJceYqRkNSZhKSO",
      "name": "v2.1-09/06/25"
    }
  ]
}