{
  "createdAt": "2025-06-11T13:53:08.667Z",
  "updatedAt": "2025-06-19T12:29:57.006Z",
  "id": "yjWf4aWsY7Po2ckx",
  "name": "02 - [Maria] v2",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "# Checklist de Testes para o Fluxo da Anna\nEste checklist contém 30 pontos essenciais para garantir que todas as funcionalidades do fluxo de trabalho sejam testadas corretamente antes de qualquer update. Ele foi elaborado com base na análise do fluxo fornecido, cobrindo integrações, lógica condicional, manipulação de dados e tratamento de erros.\n\n#### Integrações Externas\n- [x] Testar se o trigger RabbitMQ (\"Consumer\") recebe mensagens corretamente do Chatwoot.\n- [x] Verificar se o nó \"Add to List\" adiciona dados ao Redis usando a chave correta (`contact_id`).\n- [x] Confirmar que o nó \"Get List\" recupera os dados esperados do Redis.\n- [x] Testar a consulta ao Postgres em \"Get Vars\" para garantir que retorna as variáveis esperadas (e.g., `ai_agents`, `users`).\n- [x] Verificar se o nó \"Update History\" insere ou atualiza registros corretamente na tabela `core_chat_histories`.\n- [x] Testar o download de mídia no nó \"Download Media\" com diferentes tipos de arquivos (e.g., .oga, .pdf, imagens).\n- [x] Confirmar que a conversão de PDF em \"Convert PDF\" gera imagens JPG corretamente.\n- [x] Testar a transcrição de áudio em \"Transcription\" com arquivos .oga usando o modelo Whisper da OpenAI.\n- [x] Verificar se o envio de mensagens de texto via \"Envia Chatwoot Text\" funciona corretamente.\n- [x] Testar o envio de mídia (e.g., áudio MP3) via \"Send Chatwoot Media\".\n-\n#### Lógica Condicional\n- [x] Testar o \"Switch 0\" com diferentes canais (e.g., WhatsApp, Telegram), tipos de remetente e status de conversa.\n- [x] Verificar o \"Switch 1\" com diferentes `message_id` e valores de cooldown para garantir o roteamento correto.\n- [x] Testar o \"Switch 2\" com mensagens contendo URLs de mídia (e.g., .oga, .pdf) e mensagens de texto puro.\n- [x] Confirmar a lógica do \"Switch 3\" comparando timestamps de listas para decidir sobre o reset.\n-\n#### Manipulação de Dados e Loops\n- [x] Testar o \"Loop\" para processar múltiplos itens em lotes corretamente.\n- [x] Verificar se o \"Split Itens\" divide os dados conforme esperado.\n- [x] Testar o \"Split Messages\" para segmentar mensagens em partes coerentes.\n- [x] Confirmar que o \"Keep Loop\" mantém o loop ativo quando `loop_reset` é falso.\n-\n#### Componentes de IA e Processamento de Texto\n- [x] Testar o \"Message Segment Agent\" para dividir respostas em até 5 mensagens, preservando listas e quebras de linha.\n- [x] Verificar se o \"OutputParser\" analisa a saída do agente corretamente no formato JSON esperado.\n\n#### Temporização e Atrasos\n- [x] Testar o \"Cooldown\" com diferentes valores de cooldown para garantir que o atraso é aplicado corretamente.\n- [x] Verificar os atrasos em \"Delay Before Message\" (0s) e \"Delay After Message\" (1s).\n-\n#### Tratamento de Erros\n- [ ] Simular falhas no Redis (e.g., serviço indisponível) e verificar o comportamento do fluxo.\n- [ ] Testar falhas no Postgres (e.g., consulta inválida) e confirmar o tratamento de erros.\n- [x] Simular erros em requisições HTTP (e.g., 404, 500) e verificar as respostas do fluxo.\n-\n#### Nós Específicos\n- [ ] Testar o \"Downtime\" com diferentes valores (e.g., \"00:00:00\", \"01:00:00\") para validar a lógica de inatividade.\n- [ ] Verificar o \"Picture\" para baixar e fazer upload de imagens de perfil quando necessário.\n- [ ] Testar o \"Set user picture\" para atualizar a imagem do usuário no Directus.\n- [x] Confirmar que o \"Merge1\" combina os dados de entrada corretamente.\n- [x] Testar o fluxo completo com dados reais para validar a integração de todos os componentes.\n-\n\nEste checklist garante uma validação completa do fluxo, cobrindo todas as áreas críticas. Priorize os testes de acordo com as alterações recentes e registre quaisquer problemas encontrados.",
        "height": 1180,
        "width": 1440,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2920,
        360
      ],
      "typeVersion": 1,
      "id": "d8e4601e-38a8-44ac-a78c-3cbe23c9ac1a",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "queue": "anna.message.send",
        "options": {
          "acknowledge": "executionFinishesSuccessfully",
          "jsonParseBody": true,
          "onlyContent": true
        }
      },
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        -1880,
        1280
      ],
      "id": "081d17d0-d0cc-4e1a-892b-f60051893bf6",
      "name": "Consumer",
      "credentials": {
        "rabbitmq": {
          "id": "aTP4hRFNjGCY9aQX",
          "name": "brendha"
        }
      }
    }
  ],
  "connections": {
    "Consumer": {
      "main": [
        []
      ]
    }
  },
  "settings": {},
  "staticData": {
    "lastId": "MQjUoF21f4QQxPVv",
    "newId": "yjWf4aWsY7Po2ckx"
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "7a5e3d2f-d29f-4b61-9a66-b8bb33dafb0e",
  "triggerCount": 2,
  "tags": [
    {
      "createdAt": "2025-06-11T13:53:10.328Z",
      "updatedAt": "2025-06-11T13:53:10.328Z",
      "id": "bkJceYqRkNSZhKSO",
      "name": "v2.1-09/06/25"
    }
  ]
}